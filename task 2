Verilog Code for Traffic Light FSM:
module TrafficLightFSM (
    input clk,
    input reset,
    output reg [1:0] light
);
    // State encoding
    typedef enum reg [1:0] {RED = 2'b00, GREEN = 2'b01, YELLOW = 2'b10} state_t;
    state_t state, next_state;
    
    // State transition
    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= RED;
        else
            state <= next_state;
    end

    // Next state logic
    always @(*) begin
        case (state)
            RED:    next_state = GREEN;
            GREEN:  next_state = YELLOW;
            YELLOW: next_state = RED;
            default: next_state = RED;
        endcase
    end

    // Output logic
    always @(*) begin
        case (state)
            RED:    light = 2'b00;
            GREEN:  light = 2'b01;
            YELLOW: light = 2'b10;
            default: light = 2'b00;
        endcase
    end
endmodule


Simulation Testbench:
module tb_TrafficLightFSM;

    reg clk, reset;
    wire [1:0] light;

    TrafficLightFSM uut (
        .clk(clk),
        .reset(reset),
        .light(light)
    );

    initial begin
        clk = 0;
        reset = 1;
        #5 reset = 0;
        #100;
        $stop;
    end
    
    always #5 clk = ~clk; // Clock generator
    
    initial begin
        $monitor("Time=%d: reset=%b light=%b", $time, reset, light);
    end

endmodule
